# Coderabbit Configuration for CSD325: Advanced Python

# Set the language for all reviews.
system_language: "en-US"

# Keep PR comments focused on the code review.
reviews:
  # Ignore draft PRs until ready for review.
  # auto_review_drafts: (removed, unsupported property) false

  # Ignore PRs with "WIP" in the title.
  auto_review:
    ignore_title_keywords:
      - "WIP"

  # --------------------------------------------------------------------------
  # --- Path Filtering: Focus the review on what matters most in this course ---
  # --------------------------------------------------------------------------
  path_filters:
    - "**/*.py"            # Include all Python files.
    - "!**/__pycache__/**" # Ignore Python's cache directories.
    - "!**/venv/**"        # Ignore virtual environment folders.
    - "!**/.venv/**"
    - "!**/*.pyc"          # Ignore compiled Python files.
    - "!**/*.sqlite3"      # Ignore the Django database file.
    - "!**/*.pdf"
    - "!**/*.docx"
    - "!**/*.md"
    - "!**/*.zip"
    - "!**/*.png"
    - "!**/*.jpg"
    - "!**/*.mp4"

  # --------------------------------------------------------------------------
  # --- Custom Instructions: Your AI Mentor's Cheat Sheet üêç ---
  # --------------------------------------------------------------------------
  review_status: false

  path_instructions:
    - path: "**/*.py"
      instructions: |
        Please act as a Python programming mentor for the CSD325 course.
        - Ensure the code adheres to PEP 8 standards for style and readability.
        - Check for clear and concise docstrings for all modules, classes, and functions, explaining their purpose, arguments, and what they return.
        - Point out any unhandled exceptions or potential runtime errors.
        - Suggest more "Pythonic" ways to write code where applicable (e.g., using comprehensions, context managers).

    - path: "**/test_*.py"
      instructions: |
        This is a `pytest` test file. Please review it carefully.
        - Ensure that test function names are descriptive (e.g., `test_city_country_population`).
        - Confirm that appropriate pytest assertions are used (e.g., `assert x == y`, `assert value is True`).
        - Check that the tests cover both expected outcomes and edge cases.
        - Ensure the file correctly imports the functions/classes being tested.


